// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/khaos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KahosServiceClient is the client API for KahosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KahosServiceClient interface {
	Read(ctx context.Context, in *ReadPoliciesTenantReq, opts ...grpc.CallOption) (*ReadPoliciesTenantResp, error)
	Create(ctx context.Context, in *CreatePolicyTenantReq, opts ...grpc.CallOption) (*CreatePolicyTenantResp, error)
	Delete(ctx context.Context, in *DeletePolicyTenantReq, opts ...grpc.CallOption) (*DeletePolicyTenantResp, error)
	Update(ctx context.Context, in *UpdatePolicyTenantReq, opts ...grpc.CallOption) (*UpdatePolicyTenantResp, error)
	ReadRoles(ctx context.Context, in *ReadRolesTenantReq, opts ...grpc.CallOption) (*ReadRolesTenantResp, error)
	CreateRole(ctx context.Context, in *CreateRoleTenantReq, opts ...grpc.CallOption) (*CreateRoleTenantResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleTenantReq, opts ...grpc.CallOption) (*DeleteRoleTenantResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleTenantReq, opts ...grpc.CallOption) (*UpdateRoleTenantResp, error)
}

type kahosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKahosServiceClient(cc grpc.ClientConnInterface) KahosServiceClient {
	return &kahosServiceClient{cc}
}

func (c *kahosServiceClient) Read(ctx context.Context, in *ReadPoliciesTenantReq, opts ...grpc.CallOption) (*ReadPoliciesTenantResp, error) {
	out := new(ReadPoliciesTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) Create(ctx context.Context, in *CreatePolicyTenantReq, opts ...grpc.CallOption) (*CreatePolicyTenantResp, error) {
	out := new(CreatePolicyTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) Delete(ctx context.Context, in *DeletePolicyTenantReq, opts ...grpc.CallOption) (*DeletePolicyTenantResp, error) {
	out := new(DeletePolicyTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) Update(ctx context.Context, in *UpdatePolicyTenantReq, opts ...grpc.CallOption) (*UpdatePolicyTenantResp, error) {
	out := new(UpdatePolicyTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) ReadRoles(ctx context.Context, in *ReadRolesTenantReq, opts ...grpc.CallOption) (*ReadRolesTenantResp, error) {
	out := new(ReadRolesTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/ReadRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) CreateRole(ctx context.Context, in *CreateRoleTenantReq, opts ...grpc.CallOption) (*CreateRoleTenantResp, error) {
	out := new(CreateRoleTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleTenantReq, opts ...grpc.CallOption) (*DeleteRoleTenantResp, error) {
	out := new(DeleteRoleTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kahosServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleTenantReq, opts ...grpc.CallOption) (*UpdateRoleTenantResp, error) {
	out := new(UpdateRoleTenantResp)
	err := c.cc.Invoke(ctx, "/Copia_de_original_de_authorization_server_dev.KahosService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KahosServiceServer is the server API for KahosService service.
// All implementations must embed UnimplementedKahosServiceServer
// for forward compatibility
type KahosServiceServer interface {
	Read(context.Context, *ReadPoliciesTenantReq) (*ReadPoliciesTenantResp, error)
	Create(context.Context, *CreatePolicyTenantReq) (*CreatePolicyTenantResp, error)
	Delete(context.Context, *DeletePolicyTenantReq) (*DeletePolicyTenantResp, error)
	Update(context.Context, *UpdatePolicyTenantReq) (*UpdatePolicyTenantResp, error)
	ReadRoles(context.Context, *ReadRolesTenantReq) (*ReadRolesTenantResp, error)
	CreateRole(context.Context, *CreateRoleTenantReq) (*CreateRoleTenantResp, error)
	DeleteRole(context.Context, *DeleteRoleTenantReq) (*DeleteRoleTenantResp, error)
	UpdateRole(context.Context, *UpdateRoleTenantReq) (*UpdateRoleTenantResp, error)
	mustEmbedUnimplementedKahosServiceServer()
}

// UnimplementedKahosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKahosServiceServer struct {
}

func (UnimplementedKahosServiceServer) Read(context.Context, *ReadPoliciesTenantReq) (*ReadPoliciesTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedKahosServiceServer) Create(context.Context, *CreatePolicyTenantReq) (*CreatePolicyTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKahosServiceServer) Delete(context.Context, *DeletePolicyTenantReq) (*DeletePolicyTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKahosServiceServer) Update(context.Context, *UpdatePolicyTenantReq) (*UpdatePolicyTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKahosServiceServer) ReadRoles(context.Context, *ReadRolesTenantReq) (*ReadRolesTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRoles not implemented")
}
func (UnimplementedKahosServiceServer) CreateRole(context.Context, *CreateRoleTenantReq) (*CreateRoleTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedKahosServiceServer) DeleteRole(context.Context, *DeleteRoleTenantReq) (*DeleteRoleTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedKahosServiceServer) UpdateRole(context.Context, *UpdateRoleTenantReq) (*UpdateRoleTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedKahosServiceServer) mustEmbedUnimplementedKahosServiceServer() {}

// UnsafeKahosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KahosServiceServer will
// result in compilation errors.
type UnsafeKahosServiceServer interface {
	mustEmbedUnimplementedKahosServiceServer()
}

func RegisterKahosServiceServer(s grpc.ServiceRegistrar, srv KahosServiceServer) {
	s.RegisterService(&KahosService_ServiceDesc, srv)
}

func _KahosService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPoliciesTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).Read(ctx, req.(*ReadPoliciesTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).Create(ctx, req.(*CreatePolicyTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).Delete(ctx, req.(*DeletePolicyTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).Update(ctx, req.(*UpdatePolicyTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_ReadRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRolesTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).ReadRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/ReadRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).ReadRoles(ctx, req.(*ReadRolesTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).CreateRole(ctx, req.(*CreateRoleTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).DeleteRole(ctx, req.(*DeleteRoleTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KahosService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KahosServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Copia_de_original_de_authorization_server_dev.KahosService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KahosServiceServer).UpdateRole(ctx, req.(*UpdateRoleTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KahosService_ServiceDesc is the grpc.ServiceDesc for KahosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KahosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Copia_de_original_de_authorization_server_dev.KahosService",
	HandlerType: (*KahosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _KahosService_Read_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _KahosService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KahosService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KahosService_Update_Handler,
		},
		{
			MethodName: "ReadRoles",
			Handler:    _KahosService_ReadRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _KahosService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _KahosService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _KahosService_UpdateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/khaos.proto",
}
